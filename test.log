---> pavelib.tests.test_system
---> pavelib.prereqs.install_prereqs
---> pavelib.prereqs.install_ruby_prereqs
Ruby prereqs unchanged, skipping...
---> pavelib.prereqs.install_node_prereqs
Node prereqs unchanged, skipping...
---> pavelib.prereqs.install_python_prereqs
Python prereqs unchanged, skipping...
---> pavelib.utils.test.utils.clean_reports_dir
find /edx/app/edxapp/edx-platform/reports -type f -delete

Setting up for python tests
---> pavelib.utils.test.utils.clean_test_files
git clean -fqdx test_root/logs test_root/data test_root/staticfiles test_root/uploads
find . -type f -name "*.pyc" -delete
rm -rf test_root/log/auto_screenshots/*
rm -rf /tmp/mako_[cl]ms

Setting up for lms
python -m coverage run  --rcfile=lms/.coveragerc ./manage.py lms test --verbosity=1 lms/djangoapps/* common/djangoapps/* openedx/core/djangoapps/* lms/lib/* lms/tests.py   --traceback --settings=test [32;01m
========================================
 Running tests for lms 
========================================
[39;49;00m.............................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
.....................................................XX......................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
..................................F..........................................
.............................................................................
............................................................................F
FFF..........................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
....................XX.......................................................
....................................................................X.F......
.............................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................................................
.............................................F...............................
......FF.....................................................................
.............................................................................
...........................................................FFFFFFFF..F.FFFFFF
FFFFFFF..FFFFF.FFFFF.........................................................
.............................................................................
...........................-.................................................
.............................................................................
.............................................................................
.............................................................................
...........................................-....-....-.-.....................
.............................................................................
....................................................................FF.......
..............................................F..............................
.............................................................................
.............................................................................
.............................................................................
.................................................--..........................
.............................................................................
.............................................................................
.............................................................................
.......-.....................................................................
.............................................................................
........................................................................-....
..-......-.........-.....................................-...................
.........--..............--..................................................
....................-........................................................
.............................................................................
.............................................................................
................---............................................
-----------------------------------------------------------------------------
1) ERROR: test_module_not_populated_with_user_email (lms.djangoapps.courseware.tests.test_module_render.ModuleRenderTestCase)

   Traceback (most recent call last):
    lms/djangoapps/courseware/tests/test_module_render.py line 182 in test_module_not_populated_with_user_email
      self.location,
   AttributeError: 'ModuleRenderTestCase' object has no attribute 'location'
   -------------------- >> begin captured logging << --------------------
   root: DEBUG: Using MongoDB for static content serving at host=localhost port=27017 db=xcontent
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:07:57.483544+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": false, "setting": "is_staff", "table": "auth_user", "new": true}, "event_type": "edx.user.settings.changed"}
   util.models: ERROR: String decompression failed. There may be corrupted data in the database: Incorrect padding
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:07:58.478084+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 2, "truncated": [], "old": null, "setting": "password", "table": "auth_user", "new": null}, "event_type": "edx.user.settings.changed"}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
2) ERROR: test_module_populated_with_user_email (lms.djangoapps.courseware.tests.test_module_render.ModuleRenderTestCase)

   Traceback (most recent call last):
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/utils.py line 215 in inner
      return test_func(*args, **kwargs)
    lms/djangoapps/courseware/tests/test_module_render.py line 160 in test_module_populated_with_user_email
      self.location,
   AttributeError: 'ModuleRenderTestCase' object has no attribute 'location'
   -------------------- >> begin captured logging << --------------------
   root: DEBUG: Using MongoDB for static content serving at host=localhost port=27017 db=xcontent
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:07:58.569741+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": false, "setting": "is_staff", "table": "auth_user", "new": true}, "event_type": "edx.user.settings.changed"}
   util.models: ERROR: String decompression failed. There may be corrupted data in the database: Incorrect padding
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('edX', 'toy', '2012_Fall', None, None)}. Response was: None
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:07:59.588367+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 2, "truncated": [], "old": null, "setting": "password", "table": "auth_user", "new": null}, "event_type": "edx.user.settings.changed"}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
3) FAIL: test_xml_course_add_delete (lms.djangoapps.dashboard.tests.test_sysadmin.TestSysadmin)

   Traceback (most recent call last):
    lms/djangoapps/dashboard/tests/test_sysadmin.py line 415 in test_xml_course_add_delete
      response.content.decode('utf-8'))
   AssertionError: u'The specified remote branch is not available.' not found in u'<!DOCTYPE html>\n<!--[if IE 7]><html class="ie ie7 lte9 lte8 lte7" lang="en"><![endif]-->\n<!--[if IE 8]><html class="ie ie8 lte9 lte8" lang="en"><![endif]-->\n<!--[if IE 9]><html class="ie ie9 lte9" lang="en"><![endif]-->\n<!--[if gt IE 9]><!--><html lang="en"><!--<![endif]-->\n\n<head dir="ltr">\n    <meta charset="UTF-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n\n\n\n\n\n\n\n\n\n\n\n\n  \n      <title>\n        | edX\n      </title>\n  \n\n  <script type="text/javascript">\n    /* immediately break out of an iframe if coming from the marketing website */\n    (function(window) {\n      if (window.location !== window.top.location) {\n        window.top.location = window.location;\n      }\n    })(this);\n  </script>\n\n  <script type="text/javascript" src="/jsi18n/"></script>\n\n  <link rel="icon" type="image/x-icon" href="/static/images/favicon.ico" />\n\n  \n  \n\n    <link href="/static/css/lms-style-vendor.css" rel="stylesheet" type="text/css" />\n\n\n\n  \n  \n\n    <link href="/static/css/lms-style-app.css" rel="stylesheet" type="text/css" />\n\n\n\n  \n  \n\n    <link href="/static/css/lms-style-app-extend1.css" rel="stylesheet" type="text/css" />\n\n\n\n  \n  \n\n    <link href="/static/css/lms-style-app-extend2.css" rel="stylesheet" type="text/css" />\n\n\n\n\n    \n    <script type="text/javascript" src="/static/js/lms-main_vendor.js" charset="utf-8"></script>\n\n\n\n  <script>\n    window.baseUrl = "/static/";\n    (function (require) {\n        var urlArgs = "v=ec52665";\n      require.config({\n          baseUrl: baseUrl,\n          urlArgs: urlArgs\n      });\n    }).call(this, require || RequireJS.require);\n  </script>\n  <script type="text/javascript" src="/static/require-config-lms.js"></script>\n\n  \n  \n  \n\n    <link href="/static/css/lms-style-course.css" rel="stylesheet" type="text/css" />\n\n\n\n  <script type="text/javascript" src="/static/js/vendor/flot/jquery.flot.js"></script>\n  <script type="text/javascript" src="/static/js/vendor/flot/jquery.flot.axislabels.js"></script>\n\n\n\n  \n\n\n  <!--[if lt IE 9]>\n    <script src="/static/js/html5shiv.js"></script>\n  <![endif]-->\n\n  \n  <!-- dummy segment.io -->\n<script type="text/javascript">\n  var analytics = {\n    track: function() { return; },\n    trackLink: function() { return; },\n    pageview: function() { return; },\n    page: function() { return; }\n  };\n</script>\n<!-- end dummy segment.io -->\n\n\n  <meta name="path_prefix" content="">\n  <meta name="google-site-verification" content="_mipQ4AtZQDNmbtOkwehQDOgCxUUV2fb_C0b6wbiRHY" />\n\n  \n\n\n</head>\n\n<body class="ltr  lang_en">\n  <div class="window-wrap" dir="ltr">\n    <a class="nav-skip" href="#content">Skip to main content</a>\n\n    \n<!--[if IE]>\n<div class="sr message-accessibility message" id="mathjax-accessibility-message" aria-hidden="true">\n\t<p class="copy">This page features MathJax technology to render mathematical formulae. To make math accessibile, we suggest using the MathPlayer plugin. Please visit the <a href="//www.dessci.com/en/products/mathplayer/download.htm">MathPlayer Download Page</a> to download the plugin for your browser.</p>\n</div>\n<div class="sr message-accessibility message" id="mathplayer-browser-message" aria-hidden="true">\n\t<p class="copy">\n\t Your browser does not support the MathPlayer plugin. To use MathPlayer, please use Internet Explorer 6 through 9.\n\t </p>\n</div>\n<![endif]-->\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n  <header id="global-navigation" class="global " >\n    <nav aria-label="Global">\n    <h1 class="logo">\n      <a href="/">\n        \n            <img src="/static/images/default-theme/logo.png" alt="edX"/>\n        \n      </a>\n    </h1>\n\n\n    <ol class="left nav-global authenticated">\n      \n          <li class="nav-global-01">\n            <a href="/courses">Find Courses</a>\n          </li>\n          <li>\n            <a href="/sysadmin/">Sysadmin</a>\n          </li>\n      \n    </ol>\n    <ol class="user">\n      <li class="primary">\n        <a href="/dashboard" class="user-link">\n          <i class="icon fa fa-home" aria-hidden="true"></i>\n          <span class="sr">Dashboard for:</span>\n          <div>\n          test_user\n          </div>\n        </a>\n      </li>\n      <li class="primary">\n        <a href="#" class="dropdown" aria-haspopup="true" aria-expanded="false"><span class="sr">More options dropdown</span><i class="fa fa-sort-desc" aria-hidden="true"></i></a>\n        <ul class="dropdown-menu" aria-label="More Options" role="menu">\n          \n            <li><a href="/account/settings">Account Settings</a></li>\n            <li><a href="/u/test_user">My Profile</a></li>\n          \n          <li><a href="/logout" role="menuitem">Sign Out</a></li>\n        </ul>\n      </li>\n    </ol>\n  </nav>\n</header>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    <div class="content-wrapper" id="content">\n      \n\n\n\n\n\n\n<style type="text/css">\na.active-section {\n\tcolor: #551A8B;\n}\n.sysadmin-dashboard-content h2 a {\n\tmargin-right: 1.2em;\n}\ntable.stat_table {\n\tfont-family: verdana,arial,sans-serif;\n\tfont-size:11px;\n\tcolor:#333333;\n\tborder-width: 1px;\n\tborder-color: #666666;\n\tborder-collapse: collapse;\n}\ntable.stat_table th {\n\tborder-width: 1px;\n\tpadding: 8px;\n\tborder-style: solid;\n\tborder-color: #666666;\n\tbackground-color: #dedede;\n}\ntable.stat_table td {\n\tborder-width: 1px;\n\tpadding: 8px;\n\tborder-style: solid;\n\tborder-color: #666666;\n\tbackground-color: #ffffff;\n}\n\na.selectedmode { background-color: yellow; }\n\ntextarea {\n  height: 200px;\n}\n</style>\n\n<section class="container">\n<div class="sysadmin-dashboard-wrapper">\n\n  <section class="sysadmin-dashboard-content" style="margin-left:10pt;margin-top:10pt;margin-right:10pt;margin-bottom:20pt">\n    <h1>Sysadmin Dashboard</h1>\n\t<hr />\n    <h2 class="instructor-nav">\n\t  <a href="/sysadmin/" class="None">Users</a>\n      <a href="/sysadmin/courses" class="active-section">Courses</a>\n      <a href="/sysadmin/staffing" class="None">Staffing and Enrollment</a> \n      <a href="/sysadmin/gitlogs">Git Logs</a>\n      <a href="/sysadmin/task_queue" class="None">Task Queue</a>\n      <a href="/sysadmin/mgmt_commands" class="None">MGMT Commands</a>\n    </h2>\n\t<hr />\n\n\n<h3>Administer Courses</h3><br/>\n\n<form name="action" method="POST">\n  <input type="hidden" name="csrfmiddlewaretoken" value="RxjdVHkvTq5VeJGflvazPFXsVmkOdhWL" />\n  <ul class="list-input">\n\t<li class="field text">\n\t  <label for="repo_location">\n\t\tRepo Location:\n\t  </label>\n\t  <input type="text" name="repo_location" style="width:60%" />\n\t</li>\n\t<li class="field text">\n\t  <label for="repo_location">\n\t\tRepo Branch (optional):\n\t  </label>\n\t  <input type="text" name="repo_branch" style="width:60%" />\n\t</li>\n  </ul>\n  <div class="form-actions">\n\t<button type="submit" name="action" value="add_course">Load new course from github</button>\n  </div>\n  <hr />\n  <ul class="list-input">\n\t<li class="field text">\n\t  <label for="course_id">\n\t\tCourse ID or dir:\n\t  </label>\n\t  <input type="text" name="course_id" style="width:60%" />\n\t</li>\n  </ul>\n  <div class="form-actions">\n\t<button type="submit" name="action" value="del_course">Delete course from site</button>\n  </div>\n</form>\n<hr style="width:40%" />\n\n\n    <p>Unable to switch to specified branch. Please check your branch name.</p>\n\n\n\n    <br/>\n    <br/>\n    <p>\n      <hr width="100%">\n      <h2>Information about all courses</h2>\n      <table class="stat_table">\n        <tr>\n\t  <th>Course Name</th>\n\t  <th>Directory/ID</th>\n\t  <th>Git Commit</th>\n\t  <th>Last Change</th>\n\t  <th>Last Editor</th>\n\t</tr>\n          <tr>\n\t      <td>Toy Course</td>\n\t      <td>edX/toy/2012_Fall</td>\n\t      <td></td>\n\t      <td></td>\n\t      <td></td>\n\t  </tr>\n      </table>\n    </p>\n\n\n  </section>\n  <div style="text-align:right; float: right"><span id="djangopid">\'Django PID\': 16555</span>\n  | <span id="edxver">Platform Version: </span></div>\n</div>\n</section>\n\n      \n    </div>\n\n    \n      \n  \n      \n\n\n\n\n<div class="wrapper wrapper-footer">\n  <footer>\n    <div class="colophon">\n      <nav class="nav-colophon" aria-label="About">\n      <ol>\n          <li class="nav-colophon-01">\n          <a id="about" href="/about">\n              About\n          </a>\n          </li>\n            <li class="nav-colophon-02">\n              <a id="jobs" href="/jobs">\n                Jobs\n              </a>\n            </li>\n            <li class="nav-colophon-03">\n              <a id="news" href="/news">\n                News\n              </a>\n            </li>\n          <li class="nav-colophon-04">\n          <a id="faq" href="/faq">\n              FAQ\n          </a>\n          </li>\n          <li class="nav-colophon-05">\n          <a id="contact" href="/contact">\n              Contact\n          </a>\n          </li>\n      </ol>\n      </nav>\n\n      <div class="wrapper-logo">\n        <p>\n          <a href="/">\n            <img alt="organization logo placeholder" src="/static/images/default-theme/logo.png">\n          </a>\n        </p>\n      </div>\n\n      <p class="copyright">&copy; 2015 edX.</p>\n\n      <p class="copyright">\n        EdX, Open edX, and the edX and Open edX logos are registered trademarks or trademarks of <a href=\'https://www.edx.org/\'>edX Inc.</a>\n      </p>\n      <nav class="nav-legal" aria-label="Legal">\n        <ul>\n          <li class="nav-legal-01">\n            \n            <a href=\'/tos\'>Terms of Service</a> and <a href=\'/honor\'>Honor Code</a>\n          </li>\n          <li class="nav-legal-02">\n            <a href="/privacy">Privacy Policy</a>\n          </li>\n        </ul>\n      </nav>\n    </div>\n\n    <div class="footer-about-openedx">\n      <p>\n        <a href="http://openedx.org/">\n          <img src="https://files.edx.org/openedx-logos/edx-openedx-logo-tag.png" alt="Powered by Open edX" width="140" />\n        </a>\n      </p>\n    </div>\n  </footer>\n</div>\n\n    \n\n  </div>\n\n    \n    <script type="text/javascript" src="/static/js/lms-application.js" charset="utf-8"></script>\n\n\n    \n    <script type="text/javascript" src="/static/js/lms-modules.js" charset="utf-8"></script>\n\n\n\n  \n</body>\n</html>\n\n\n\n<!-- Performance beacon for onload times -->\n'
   -------------------- >> begin captured logging << --------------------
   root: DEBUG: Using MongoDB for static content serving at host=localhost port=27017 db=xcontent
   xmodule.modulestore.xml: DEBUG: ========> Starting courselike import from toy
   xmodule.modulestore.xml: DEBUG: ========> Done with courselike import from toy
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:13:08.476678+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": null, "setting": "password", "table": "auth_user", "new": null}, "event_type": "edx.user.settings.changed"}
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:13:08.485363+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": false, "setting": "is_staff", "table": "auth_user", "new": true}, "event_type": "edx.user.settings.changed"}
   audit: INFO: Login success - test_user (test_user+sysadmin@edx.org)
   tracking: INFO: {"username": "test_user", "event_type": "/sysadmin/courses", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"action\": [\"add_course\"], \"repo_location\": [\"github.com/mitocw/edx4edx_lite\"]}, \"GET\": {}}", "event_source": "server", "context": {"user_id": 1, "org_id": "", "course_id": "", "path": "/sysadmin/courses"}, "time": "2015-05-05T21:13:08.499469+00:00", "page": null}
   tracking: INFO: {"username": "test_user", "event_type": "add_course", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": {}, "event_source": "server", "context": {"user_id": 1, "org_id": "", "course_id": "", "path": "/sysadmin/courses"}, "time": "2015-05-05T21:13:08.503206+00:00", "page": "courses_sysdashboard"}
   tracking: INFO: {"username": "test_user", "event_type": "/sysadmin/courses", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"action\": [\"add_course\"], \"repo_location\": [\"http://example.com/not_real.git\"]}, \"GET\": {}}", "event_source": "server", "context": {"user_id": 1, "org_id": "", "course_id": "", "path": "/sysadmin/courses"}, "time": "2015-05-05T21:13:08.528664+00:00", "page": null}
   tracking: INFO: {"username": "test_user", "event_type": "add_course", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": {}, "event_source": "server", "context": {"user_id": 1, "org_id": "", "course_id": "", "path": "/sysadmin/courses"}, "time": "2015-05-05T21:13:08.531601+00:00", "page": "courses_sysdashboard"}
   dashboard.sysadmin: ERROR: Git pull or clone output was: "Cloning into 'not_real'...\nfatal: repository 'http://example.com/not_real.git/' not found\n"
   Traceback (most recent call last):
     File "/edx/app/edxapp/edx-platform/lms/djangoapps/dashboard/sysadmin.py", line 503, in import_xml_course
       subprocess.check_output(cmd, stderr=subprocess.STDOUT, cwd=cwd)
     File "/usr/lib/python2.7/subprocess.py", line 544, in check_output
       raise CalledProcessError(retcode, cmd, output=output)
   CalledProcessError: Command '['git', 'clone', u'http://example.com/not_real.git']' returned non-zero exit status 128
   tracking: INFO: {"username": "test_user", "event_type": "/sysadmin/courses", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"action\": [\"add_course\"], \"repo_location\": [\"https://github.com/mitocw/edx4edx_lite.git\"]}, \"GET\": {}}", "event_source": "server", "context": {"user_id": 1, "org_id": "", "course_id": "", "path": "/sysadmin/courses"}, "time": "2015-05-05T21:13:08.664866+00:00", "page": null}
   tracking: INFO: {"username": "test_user", "event_type": "add_course", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": {}, "event_source": "server", "context": {"user_id": 1, "org_id": "", "course_id": "", "path": "/sysadmin/courses"}, "time": "2015-05-05T21:13:08.668589+00:00", "page": "courses_sysdashboard"}
   xmodule.modulestore.xml: DEBUG: ========> Starting courselike import from /edx/app/edxapp/edx-platform/test_root/data/edx4edx_lite
   xmodule.course_module: DEBUG: Loading grading policy from policies/edx4edx/grading_policy.json
   xmodule.modulestore.xml: DEBUG: ========> Done with courselike import from /edx/app/edxapp/edx-platform/test_root/data/edx4edx_lite
   tracking: INFO: {"username": "test_user", "event_type": "/sysadmin/courses", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"course_id\": [\"MITx/edx4edx/edx4edx\"], \"action\": [\"del_course\"]}, \"GET\": {}}", "event_source": "server", "context": {"user_id": 1, "org_id": "", "course_id": "", "path": "/sysadmin/courses"}, "time": "2015-05-05T21:13:10.790365+00:00", "page": null}
   tracking: INFO: {"username": "test_user", "event_type": "del_course", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": {}, "event_source": "server", "context": {"user_id": 1, "org_id": "", "course_id": "", "path": "/sysadmin/courses"}, "time": "2015-05-05T21:13:10.797116+00:00", "page": "courses_sysdashboard"}
   tracking: INFO: {"username": "test_user", "event_type": "/sysadmin/courses", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"action\": [\"add_course\"], \"repo_branch\": [\"asdfasdfasdf\"], \"repo_location\": [\"https://github.com/mitocw/edx4edx_lite.git\"]}, \"GET\": {}}", "event_source": "server", "context": {"user_id": 1, "org_id": "", "course_id": "", "path": "/sysadmin/courses"}, "time": "2015-05-05T21:13:10.847226+00:00", "page": null}
   tracking: INFO: {"username": "test_user", "event_type": "add_course", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": {}, "event_source": "server", "context": {"user_id": 1, "org_id": "", "course_id": "", "path": "/sysadmin/courses"}, "time": "2015-05-05T21:13:10.849890+00:00", "page": "courses_sysdashboard"}
   dashboard.git_import: DEBUG: Command was: 'git fetch'. Working directory was: Path(u'test_root/data/edx4edx_lite')
   dashboard.git_import: DEBUG: Command output was: ''
   dashboard.git_import: ERROR: Getting a list of remote branches failed: "fatal: unable to access 'https://github.com/mitocw/edx4edx_lite.git/': Empty reply from server\n"
   Traceback (most recent call last):
     File "/edx/app/edxapp/edx-platform/lms/djangoapps/dashboard/git_import.py", line 86, in switch_branch
       output = cmd_log(cmd, rdir)
     File "/edx/app/edxapp/edx-platform/lms/djangoapps/dashboard/git_import.py", line 61, in cmd_log
       output = subprocess.check_output(cmd, cwd=cwd, stderr=subprocess.STDOUT)
     File "/usr/lib/python2.7/subprocess.py", line 544, in check_output
       raise CalledProcessError(retcode, cmd, output=output)
   CalledProcessError: Command '['git', 'ls-remote', 'origin', '-h', 'refs/heads/asdfasdfasdf']' returned non-zero exit status 128
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
4) FAIL: test_number_of_mongo_queries_1___mongo___1__21__15__40__27_ (lms.djangoapps.django_comment_client.forum.tests.SingleThreadQueryCountTestCase)

   Traceback (most recent call last):
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/ddt.py line 114 in wrapper
      return func(self, *args, **kwargs)
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/mock.py line 1201 in patched
      return func(*args, **keywargs)
    lms/djangoapps/django_comment_client/forum/tests.py line 384 in test_number_of_mongo_queries
      call_single_thread()
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 277 in __exit__
      executed, self.num
   AssertionError: 41 queries executed, 40 expected
   -------------------- >> begin captured logging << --------------------
   root: DEBUG: Using MongoDB for static content serving at host=localhost port=27017 db=xcontent
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:16:09.527617+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": false, "setting": "is_staff", "table": "auth_user", "new": true}, "event_type": "edx.user.settings.changed"}
   util.models: ERROR: String decompression failed. There may be corrupted data in the database: Incorrect padding
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('org.4509', 'course_4509', 'Run_4509', None, None)}. Response was: None
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:16:09.573582+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 2, "truncated": [], "old": null, "setting": "password", "table": "auth_user", "new": null}, "event_type": "edx.user.settings.changed"}
   django.db.backends: DEBUG: (0.000) SELECT "auth_userprofile"."id", "auth_userprofile"."user_id", "auth_userprofile"."name", "auth_userprofile"."meta", "auth_userprofile"."courseware", "auth_userprofile"."language", "auth_userprofile"."location", "auth_userprofile"."year_of_birth", "auth_userprofile"."gender", "auth_userprofile"."level_of_education", "auth_userprofile"."mailing_address", "auth_userprofile"."city", "auth_userprofile"."country", "auth_userprofile"."goals", "auth_userprofile"."allow_certificate", "auth_userprofile"."bio", "auth_userprofile"."profile_image_uploaded_at", "auth_userprofile"."nonregistered" FROM "auth_userprofile" WHERE "auth_userprofile"."user_id" = 2 ; args=(2,)
   django.db.backends: DEBUG: (0.000) SELECT "student_courseenrollment"."id", "student_courseenrollment"."user_id", "student_courseenrollment"."course_id", "student_courseenrollment"."created", "student_courseenrollment"."is_active", "student_courseenrollment"."mode" FROM "student_courseenrollment" WHERE ("student_courseenrollment"."course_id" = org.4509/course_4509/Run_4509  AND "student_courseenrollment"."user_id" = 2 ); args=(u'org.4509/course_4509/Run_4509', 2)
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = org.4509/course_4509/Run_4509 ; args=(u'org.4509/course_4509/Run_4509',)
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = org.4509/course_4509/Run_4509 ; args=(u'org.4509/course_4509/Run_4509',)
   django.db.backends: DEBUG: (0.000) INSERT INTO "course_groups_coursecohortssettings" ("is_cohorted", "course_id", "cohorted_discussions", "always_cohort_inline_discussions") VALUES (False, org.4509/course_4509/Run_4509, [], True); args=[False, u'org.4509/course_4509/Run_4509', '[]', True]
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_courseusergroup"."id", "course_groups_courseusergroup"."name", "course_groups_courseusergroup"."course_id", "course_groups_courseusergroup"."group_type" FROM "course_groups_courseusergroup" WHERE ("course_groups_courseusergroup"."course_id" = org.4509/course_4509/Run_4509  AND "course_groups_courseusergroup"."group_type" = cohort ); args=(u'org.4509/course_4509/Run_4509', 'cohort')
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = org.4509/course_4509/Run_4509 ; args=(u'org.4509/course_4509/Run_4509',)
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_courseusergroup"."id", "course_groups_courseusergroup"."name", "course_groups_courseusergroup"."course_id", "course_groups_courseusergroup"."group_type" FROM "course_groups_courseusergroup" WHERE ("course_groups_courseusergroup"."course_id" = org.4509/course_4509/Run_4509  AND "course_groups_courseusergroup"."group_type" = cohort ); args=(u'org.4509/course_4509/Run_4509', 'cohort')
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = org.4509/course_4509/Run_4509 ; args=(u'org.4509/course_4509/Run_4509',)
   lms.lib.comment_client.utils: INFO: comment_client_request_log: request_id=3dcbd6d5-a114-4815-a860-9b0b4ec4f1c5, method=get, url=http://localhost:4567/api/v1/users/2, duration=0.000391960144043
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4509/course_4509/Run_4509 ); args=(2, u'org.4509/course_4509/Run_4509')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = see_all_cohorts ) LIMIT 1; args=(1, 'see_all_cohorts')
   lms.lib.comment_client.utils: INFO: comment_client_request_log: request_id=ac58edaa-f94c-4be2-8141-3b55f1bb7ef7, method=get, url=http://localhost:4567/api/v1/threads/test_thread_id, duration=0.000298976898193
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = org.4509/course_4509/Run_4509 ; args=(u'org.4509/course_4509/Run_4509',)
   openedx.core.djangoapps.course_groups.cohorts: DEBUG: is_commentable_cohorted(org.4509/course_4509/Run_4509, dummy_discussion_id) = False
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4509/course_4509/Run_4509 ); args=(2, u'org.4509/course_4509/Run_4509')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = openclose_thread ) LIMIT 1; args=(1, 'openclose_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4509/course_4509/Run_4509 ); args=(2, u'org.4509/course_4509/Run_4509')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4509/course_4509/Run_4509 ); args=(2, u'org.4509/course_4509/Run_4509')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_thread ) LIMIT 1; args=(1, 'update_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4509/course_4509/Run_4509 ); args=(2, u'org.4509/course_4509/Run_4509')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_comment ) LIMIT 1; args=(1, 'create_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4509/course_4509/Run_4509 ); args=(2, u'org.4509/course_4509/Run_4509')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_thread ) LIMIT 1; args=(1, 'delete_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4509/course_4509/Run_4509 ); args=(2, u'org.4509/course_4509/Run_4509')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_thread ) LIMIT 1; args=(1, 'update_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4509/course_4509/Run_4509 ); args=(2, u'org.4509/course_4509/Run_4509')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = openclose_thread ) LIMIT 1; args=(1, 'openclose_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4509/course_4509/Run_4509 ); args=(2, u'org.4509/course_4509/Run_4509')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4509/course_4509/Run_4509 ); args=(2, u'org.4509/course_4509/Run_4509')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4509/course_4509/Run_4509 ); args=(2, u'org.4509/course_4509/Run_4509')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4509/course_4509/Run_4509 ); args=(2, u'org.4509/course_4509/Run_4509')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4509/course_4509/Run_4509 ); args=(2, u'org.4509/course_4509/Run_4509')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4509/course_4509/Run_4509 ); args=(2, u'org.4509/course_4509/Run_4509')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4509/course_4509/Run_4509 ); args=(2, u'org.4509/course_4509/Run_4509')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = org.4509/course_4509/Run_4509 ; args=(u'org.4509/course_4509/Run_4509',)
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
5) FAIL: test_number_of_mongo_queries_2___mongo___50__315__15__628__27_ (lms.djangoapps.django_comment_client.forum.tests.SingleThreadQueryCountTestCase)

   Traceback (most recent call last):
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/ddt.py line 114 in wrapper
      return func(self, *args, **kwargs)
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/mock.py line 1201 in patched
      return func(*args, **keywargs)
    lms/djangoapps/django_comment_client/forum/tests.py line 384 in test_number_of_mongo_queries
      call_single_thread()
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 277 in __exit__
      executed, self.num
   AssertionError: 629 queries executed, 628 expected
   -------------------- >> begin captured logging << --------------------
   root: DEBUG: Using MongoDB for static content serving at host=localhost port=27017 db=xcontent
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:16:09.734214+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": false, "setting": "is_staff", "table": "auth_user", "new": true}, "event_type": "edx.user.settings.changed"}
   util.models: ERROR: String decompression failed. There may be corrupted data in the database: Incorrect padding
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('org.4510', 'course_4510', 'Run_4510', None, None)}. Response was: None
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:16:09.786594+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 2, "truncated": [], "old": null, "setting": "password", "table": "auth_user", "new": null}, "event_type": "edx.user.settings.changed"}
   django.db.backends: DEBUG: (0.000) SELECT "auth_userprofile"."id", "auth_userprofile"."user_id", "auth_userprofile"."name", "auth_userprofile"."meta", "auth_userprofile"."courseware", "auth_userprofile"."language", "auth_userprofile"."location", "auth_userprofile"."year_of_birth", "auth_userprofile"."gender", "auth_userprofile"."level_of_education", "auth_userprofile"."mailing_address", "auth_userprofile"."city", "auth_userprofile"."country", "auth_userprofile"."goals", "auth_userprofile"."allow_certificate", "auth_userprofile"."bio", "auth_userprofile"."profile_image_uploaded_at", "auth_userprofile"."nonregistered" FROM "auth_userprofile" WHERE "auth_userprofile"."user_id" = 2 ; args=(2,)
   django.db.backends: DEBUG: (0.000) SELECT "student_courseenrollment"."id", "student_courseenrollment"."user_id", "student_courseenrollment"."course_id", "student_courseenrollment"."created", "student_courseenrollment"."is_active", "student_courseenrollment"."mode" FROM "student_courseenrollment" WHERE ("student_courseenrollment"."course_id" = org.4510/course_4510/Run_4510  AND "student_courseenrollment"."user_id" = 2 ); args=(u'org.4510/course_4510/Run_4510', 2)
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = org.4510/course_4510/Run_4510 ; args=(u'org.4510/course_4510/Run_4510',)
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = org.4510/course_4510/Run_4510 ; args=(u'org.4510/course_4510/Run_4510',)
   django.db.backends: DEBUG: (0.000) INSERT INTO "course_groups_coursecohortssettings" ("is_cohorted", "course_id", "cohorted_discussions", "always_cohort_inline_discussions") VALUES (False, org.4510/course_4510/Run_4510, [], True); args=[False, u'org.4510/course_4510/Run_4510', '[]', True]
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_courseusergroup"."id", "course_groups_courseusergroup"."name", "course_groups_courseusergroup"."course_id", "course_groups_courseusergroup"."group_type" FROM "course_groups_courseusergroup" WHERE ("course_groups_courseusergroup"."course_id" = org.4510/course_4510/Run_4510  AND "course_groups_courseusergroup"."group_type" = cohort ); args=(u'org.4510/course_4510/Run_4510', 'cohort')
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = org.4510/course_4510/Run_4510 ; args=(u'org.4510/course_4510/Run_4510',)
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_courseusergroup"."id", "course_groups_courseusergroup"."name", "course_groups_courseusergroup"."course_id", "course_groups_courseusergroup"."group_type" FROM "course_groups_courseusergroup" WHERE ("course_groups_courseusergroup"."course_id" = org.4510/course_4510/Run_4510  AND "course_groups_courseusergroup"."group_type" = cohort ); args=(u'org.4510/course_4510/Run_4510', 'cohort')
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = org.4510/course_4510/Run_4510 ; args=(u'org.4510/course_4510/Run_4510',)
   lms.lib.comment_client.utils: INFO: comment_client_request_log: request_id=a2cd5c79-1bf6-4c1f-90c9-92ad36753b0f, method=get, url=http://localhost:4567/api/v1/users/2, duration=0.000239849090576
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = see_all_cohorts ) LIMIT 1; args=(1, 'see_all_cohorts')
   lms.lib.comment_client.utils: INFO: comment_client_request_log: request_id=892e9699-2b26-4a88-9ec2-4b8f0b033959, method=get, url=http://localhost:4567/api/v1/threads/test_thread_id, duration=0.000371932983398
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = org.4510/course_4510/Run_4510 ; args=(u'org.4510/course_4510/Run_4510',)
   openedx.core.djangoapps.course_groups.cohorts: DEBUG: is_commentable_cohorted(org.4510/course_4510/Run_4510, dummy_discussion_id) = False
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = openclose_thread ) LIMIT 1; args=(1, 'openclose_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_thread ) LIMIT 1; args=(1, 'update_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_comment ) LIMIT 1; args=(1, 'create_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_thread ) LIMIT 1; args=(1, 'delete_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_thread ) LIMIT 1; args=(1, 'update_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = openclose_thread ) LIMIT 1; args=(1, 'openclose_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.001) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.002) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.001) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.001) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = org.4510/course_4510/Run_4510 ); args=(2, u'org.4510/course_4510/Run_4510')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = org.4510/course_4510/Run_4510 ; args=(u'org.4510/course_4510/Run_4510',)
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
6) FAIL: test_number_of_mongo_queries_3___split___1__3__3__40__27_ (lms.djangoapps.django_comment_client.forum.tests.SingleThreadQueryCountTestCase)

   Traceback (most recent call last):
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/ddt.py line 114 in wrapper
      return func(self, *args, **kwargs)
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/mock.py line 1201 in patched
      return func(*args, **keywargs)
    lms/djangoapps/django_comment_client/forum/tests.py line 384 in test_number_of_mongo_queries
      call_single_thread()
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 277 in __exit__
      executed, self.num
   AssertionError: 41 queries executed, 40 expected
   -------------------- >> begin captured logging << --------------------
   root: DEBUG: Using MongoDB for static content serving at host=localhost port=27017 db=xcontent
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:16:11.441200+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": false, "setting": "is_staff", "table": "auth_user", "new": true}, "event_type": "edx.user.settings.changed"}
   xmodule.modulestore.split_mongo.split: DEBUG: Attempted to insert duplicate structure 5549331b56c02c40ab5eaa23
   xmodule.modulestore.split_mongo.split: DEBUG: Attempted to insert duplicate structure 5549331b56c02c40ab5eaa26
   xmodule.modulestore.split_mongo.split: DEBUG: Attempted to insert duplicate definition 5549331b56c02c40ab5eaa22
   xmodule.modulestore.split_mongo.split: DEBUG: Attempted to insert duplicate definition 5549331b56c02c40ab5eaa27
   xmodule.modulestore.split_mongo.split: DEBUG: Attempted to insert duplicate definition 5549331b56c02c40ab5eaa25
   util.models: ERROR: String decompression failed. There may be corrupted data in the database: Not a gzipped file
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': CourseLocator('org.4511', 'course_4511', 'Run_4511', None, None)}. Response was: None
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:16:11.508613+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 2, "truncated": [], "old": null, "setting": "password", "table": "auth_user", "new": null}, "event_type": "edx.user.settings.changed"}
   django.db.backends: DEBUG: (0.000) SELECT "auth_userprofile"."id", "auth_userprofile"."user_id", "auth_userprofile"."name", "auth_userprofile"."meta", "auth_userprofile"."courseware", "auth_userprofile"."language", "auth_userprofile"."location", "auth_userprofile"."year_of_birth", "auth_userprofile"."gender", "auth_userprofile"."level_of_education", "auth_userprofile"."mailing_address", "auth_userprofile"."city", "auth_userprofile"."country", "auth_userprofile"."goals", "auth_userprofile"."allow_certificate", "auth_userprofile"."bio", "auth_userprofile"."profile_image_uploaded_at", "auth_userprofile"."nonregistered" FROM "auth_userprofile" WHERE "auth_userprofile"."user_id" = 2 ; args=(2,)
   django.db.backends: DEBUG: (0.000) SELECT "student_courseenrollment"."id", "student_courseenrollment"."user_id", "student_courseenrollment"."course_id", "student_courseenrollment"."created", "student_courseenrollment"."is_active", "student_courseenrollment"."mode" FROM "student_courseenrollment" WHERE ("student_courseenrollment"."course_id" = course-v1:org.4511+course_4511+Run_4511  AND "student_courseenrollment"."user_id" = 2 ); args=(u'course-v1:org.4511+course_4511+Run_4511', 2)
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = course-v1:org.4511+course_4511+Run_4511 ; args=(u'course-v1:org.4511+course_4511+Run_4511',)
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = course-v1:org.4511+course_4511+Run_4511 ; args=(u'course-v1:org.4511+course_4511+Run_4511',)
   django.db.backends: DEBUG: (0.000) INSERT INTO "course_groups_coursecohortssettings" ("is_cohorted", "course_id", "cohorted_discussions", "always_cohort_inline_discussions") VALUES (False, course-v1:org.4511+course_4511+Run_4511, [], True); args=[False, u'course-v1:org.4511+course_4511+Run_4511', '[]', True]
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_courseusergroup"."id", "course_groups_courseusergroup"."name", "course_groups_courseusergroup"."course_id", "course_groups_courseusergroup"."group_type" FROM "course_groups_courseusergroup" WHERE ("course_groups_courseusergroup"."course_id" = course-v1:org.4511+course_4511+Run_4511  AND "course_groups_courseusergroup"."group_type" = cohort ); args=(u'course-v1:org.4511+course_4511+Run_4511', 'cohort')
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = course-v1:org.4511+course_4511+Run_4511 ; args=(u'course-v1:org.4511+course_4511+Run_4511',)
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_courseusergroup"."id", "course_groups_courseusergroup"."name", "course_groups_courseusergroup"."course_id", "course_groups_courseusergroup"."group_type" FROM "course_groups_courseusergroup" WHERE ("course_groups_courseusergroup"."course_id" = course-v1:org.4511+course_4511+Run_4511  AND "course_groups_courseusergroup"."group_type" = cohort ); args=(u'course-v1:org.4511+course_4511+Run_4511', 'cohort')
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = course-v1:org.4511+course_4511+Run_4511 ; args=(u'course-v1:org.4511+course_4511+Run_4511',)
   lms.lib.comment_client.utils: INFO: comment_client_request_log: request_id=4f3e84e2-c26f-49c2-bf33-3cd694bf8680, method=get, url=http://localhost:4567/api/v1/users/2, duration=0.000269889831543
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4511+course_4511+Run_4511 ); args=(2, u'course-v1:org.4511+course_4511+Run_4511')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = see_all_cohorts ) LIMIT 1; args=(1, 'see_all_cohorts')
   lms.lib.comment_client.utils: INFO: comment_client_request_log: request_id=580d5933-51f1-4770-9cdf-3497760ee239, method=get, url=http://localhost:4567/api/v1/threads/test_thread_id, duration=0.000230073928833
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = course-v1:org.4511+course_4511+Run_4511 ; args=(u'course-v1:org.4511+course_4511+Run_4511',)
   openedx.core.djangoapps.course_groups.cohorts: DEBUG: is_commentable_cohorted(course-v1:org.4511+course_4511+Run_4511, dummy_discussion_id) = False
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4511+course_4511+Run_4511 ); args=(2, u'course-v1:org.4511+course_4511+Run_4511')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = openclose_thread ) LIMIT 1; args=(1, 'openclose_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4511+course_4511+Run_4511 ); args=(2, u'course-v1:org.4511+course_4511+Run_4511')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4511+course_4511+Run_4511 ); args=(2, u'course-v1:org.4511+course_4511+Run_4511')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_thread ) LIMIT 1; args=(1, 'update_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4511+course_4511+Run_4511 ); args=(2, u'course-v1:org.4511+course_4511+Run_4511')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_comment ) LIMIT 1; args=(1, 'create_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4511+course_4511+Run_4511 ); args=(2, u'course-v1:org.4511+course_4511+Run_4511')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_thread ) LIMIT 1; args=(1, 'delete_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4511+course_4511+Run_4511 ); args=(2, u'course-v1:org.4511+course_4511+Run_4511')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_thread ) LIMIT 1; args=(1, 'update_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4511+course_4511+Run_4511 ); args=(2, u'course-v1:org.4511+course_4511+Run_4511')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = openclose_thread ) LIMIT 1; args=(1, 'openclose_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4511+course_4511+Run_4511 ); args=(2, u'course-v1:org.4511+course_4511+Run_4511')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4511+course_4511+Run_4511 ); args=(2, u'course-v1:org.4511+course_4511+Run_4511')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4511+course_4511+Run_4511 ); args=(2, u'course-v1:org.4511+course_4511+Run_4511')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4511+course_4511+Run_4511 ); args=(2, u'course-v1:org.4511+course_4511+Run_4511')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4511+course_4511+Run_4511 ); args=(2, u'course-v1:org.4511+course_4511+Run_4511')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4511+course_4511+Run_4511 ); args=(2, u'course-v1:org.4511+course_4511+Run_4511')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4511+course_4511+Run_4511 ); args=(2, u'course-v1:org.4511+course_4511+Run_4511')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = course-v1:org.4511+course_4511+Run_4511 ; args=(u'course-v1:org.4511+course_4511+Run_4511',)
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
7) FAIL: test_number_of_mongo_queries_4___split___50__3__3__628__27_ (lms.djangoapps.django_comment_client.forum.tests.SingleThreadQueryCountTestCase)

   Traceback (most recent call last):
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/ddt.py line 114 in wrapper
      return func(self, *args, **kwargs)
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/mock.py line 1201 in patched
      return func(*args, **keywargs)
    lms/djangoapps/django_comment_client/forum/tests.py line 384 in test_number_of_mongo_queries
      call_single_thread()
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 277 in __exit__
      executed, self.num
   AssertionError: 629 queries executed, 628 expected
   -------------------- >> begin captured logging << --------------------
   root: DEBUG: Using MongoDB for static content serving at host=localhost port=27017 db=xcontent
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:16:11.651430+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": false, "setting": "is_staff", "table": "auth_user", "new": true}, "event_type": "edx.user.settings.changed"}
   xmodule.modulestore.split_mongo.split: DEBUG: Attempted to insert duplicate structure 5549331b56c02c40ab5eaa29
   xmodule.modulestore.split_mongo.split: DEBUG: Attempted to insert duplicate structure 5549331b56c02c40ab5eaa2c
   xmodule.modulestore.split_mongo.split: DEBUG: Attempted to insert duplicate definition 5549331b56c02c40ab5eaa2b
   xmodule.modulestore.split_mongo.split: DEBUG: Attempted to insert duplicate definition 5549331b56c02c40ab5eaa28
   xmodule.modulestore.split_mongo.split: DEBUG: Attempted to insert duplicate definition 5549331b56c02c40ab5eaa2d
   util.models: ERROR: String decompression failed. There may be corrupted data in the database: Not a gzipped file
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': CourseLocator('org.4512', 'course_4512', 'Run_4512', None, None)}. Response was: None
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:16:11.720201+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 2, "truncated": [], "old": null, "setting": "password", "table": "auth_user", "new": null}, "event_type": "edx.user.settings.changed"}
   django.db.backends: DEBUG: (0.000) SELECT "auth_userprofile"."id", "auth_userprofile"."user_id", "auth_userprofile"."name", "auth_userprofile"."meta", "auth_userprofile"."courseware", "auth_userprofile"."language", "auth_userprofile"."location", "auth_userprofile"."year_of_birth", "auth_userprofile"."gender", "auth_userprofile"."level_of_education", "auth_userprofile"."mailing_address", "auth_userprofile"."city", "auth_userprofile"."country", "auth_userprofile"."goals", "auth_userprofile"."allow_certificate", "auth_userprofile"."bio", "auth_userprofile"."profile_image_uploaded_at", "auth_userprofile"."nonregistered" FROM "auth_userprofile" WHERE "auth_userprofile"."user_id" = 2 ; args=(2,)
   django.db.backends: DEBUG: (0.000) SELECT "student_courseenrollment"."id", "student_courseenrollment"."user_id", "student_courseenrollment"."course_id", "student_courseenrollment"."created", "student_courseenrollment"."is_active", "student_courseenrollment"."mode" FROM "student_courseenrollment" WHERE ("student_courseenrollment"."course_id" = course-v1:org.4512+course_4512+Run_4512  AND "student_courseenrollment"."user_id" = 2 ); args=(u'course-v1:org.4512+course_4512+Run_4512', 2)
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = course-v1:org.4512+course_4512+Run_4512 ; args=(u'course-v1:org.4512+course_4512+Run_4512',)
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = course-v1:org.4512+course_4512+Run_4512 ; args=(u'course-v1:org.4512+course_4512+Run_4512',)
   django.db.backends: DEBUG: (0.000) INSERT INTO "course_groups_coursecohortssettings" ("is_cohorted", "course_id", "cohorted_discussions", "always_cohort_inline_discussions") VALUES (False, course-v1:org.4512+course_4512+Run_4512, [], True); args=[False, u'course-v1:org.4512+course_4512+Run_4512', '[]', True]
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_courseusergroup"."id", "course_groups_courseusergroup"."name", "course_groups_courseusergroup"."course_id", "course_groups_courseusergroup"."group_type" FROM "course_groups_courseusergroup" WHERE ("course_groups_courseusergroup"."course_id" = course-v1:org.4512+course_4512+Run_4512  AND "course_groups_courseusergroup"."group_type" = cohort ); args=(u'course-v1:org.4512+course_4512+Run_4512', 'cohort')
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = course-v1:org.4512+course_4512+Run_4512 ; args=(u'course-v1:org.4512+course_4512+Run_4512',)
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_courseusergroup"."id", "course_groups_courseusergroup"."name", "course_groups_courseusergroup"."course_id", "course_groups_courseusergroup"."group_type" FROM "course_groups_courseusergroup" WHERE ("course_groups_courseusergroup"."course_id" = course-v1:org.4512+course_4512+Run_4512  AND "course_groups_courseusergroup"."group_type" = cohort ); args=(u'course-v1:org.4512+course_4512+Run_4512', 'cohort')
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = course-v1:org.4512+course_4512+Run_4512 ; args=(u'course-v1:org.4512+course_4512+Run_4512',)
   lms.lib.comment_client.utils: INFO: comment_client_request_log: request_id=80d70f19-a4f2-442d-b5ef-e4a3703da140, method=get, url=http://localhost:4567/api/v1/users/2, duration=0.000271081924438
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = see_all_cohorts ) LIMIT 1; args=(1, 'see_all_cohorts')
   lms.lib.comment_client.utils: INFO: comment_client_request_log: request_id=a361c506-bc60-44c4-af6d-a9ae1a1d48e8, method=get, url=http://localhost:4567/api/v1/threads/test_thread_id, duration=0.000446081161499
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = course-v1:org.4512+course_4512+Run_4512 ; args=(u'course-v1:org.4512+course_4512+Run_4512',)
   openedx.core.djangoapps.course_groups.cohorts: DEBUG: is_commentable_cohorted(course-v1:org.4512+course_4512+Run_4512, dummy_discussion_id) = False
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = openclose_thread ) LIMIT 1; args=(1, 'openclose_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_thread ) LIMIT 1; args=(1, 'update_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_comment ) LIMIT 1; args=(1, 'create_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_thread ) LIMIT 1; args=(1, 'delete_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_thread ) LIMIT 1; args=(1, 'update_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = openclose_thread ) LIMIT 1; args=(1, 'openclose_thread')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.001) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.001) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.001) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.001) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.001) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = edit_content ) LIMIT 1; args=(1, 'edit_content')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = create_sub_comment ) LIMIT 1; args=(1, 'create_sub_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = delete_comment ) LIMIT 1; args=(1, 'delete_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = update_comment ) LIMIT 1; args=(1, 'update_comment')
   django.db.backends: DEBUG: (0.000) SELECT "django_comment_client_role"."id", "django_comment_client_role"."name", "django_comment_client_role"."course_id" FROM "django_comment_client_role" INNER JOIN "django_comment_client_role_users" ON ("django_comment_client_role"."id" = "django_comment_client_role_users"."role_id") WHERE ("django_comment_client_role_users"."user_id" = 2  AND "django_comment_client_role"."course_id" = course-v1:org.4512+course_4512+Run_4512 ); args=(2, u'course-v1:org.4512+course_4512+Run_4512')
   django.db.backends: DEBUG: (0.000) SELECT (1) AS "a" FROM "django_comment_client_permission" INNER JOIN "django_comment_client_permission_roles" ON ("django_comment_client_permission"."name" = "django_comment_client_permission_roles"."permission_id") WHERE ("django_comment_client_permission_roles"."role_id" = 1  AND "django_comment_client_permission"."name" = vote ) LIMIT 1; args=(1, 'vote')
   django.db.backends: DEBUG: (0.000) SELECT "course_groups_coursecohortssettings"."id", "course_groups_coursecohortssettings"."is_cohorted", "course_groups_coursecohortssettings"."course_id", "course_groups_coursecohortssettings"."cohorted_discussions", "course_groups_coursecohortssettings"."always_cohort_inline_discussions" FROM "course_groups_coursecohortssettings" WHERE "course_groups_coursecohortssettings"."course_id" = course-v1:org.4512+course_4512+Run_4512 ; args=(u'course-v1:org.4512+course_4512+Run_4512',)
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
8) ERROR: test_full_course_no_students (lms.djangoapps.instructor_analytics.tests.test_basic.TestStudentSubmissionsAnalyticsBasic)

   Traceback (most recent call last):
    lms/djangoapps/instructor_analytics/tests/test_basic.py line 409 in test_full_course_no_students
      self.load_course('edX/simple/2012_Fall')
    lms/djangoapps/instructor_analytics/tests/test_basic.py line 395 in load_course
      self.course = get_course(course_key)
    lms/djangoapps/courseware/courses.py line 61 in get_course
      raise ValueError(u"Course not found: {0}".format(course_id))
   ValueError: Course not found: edX/simple/2012_Fall
   -------------------- >> begin captured logging << --------------------
   root: DEBUG: Using MongoDB for static content serving at host=localhost port=27017 db=xcontent
   xmodule.modulestore.xml: DEBUG: ========> Starting courselike import from toy
   xmodule.modulestore.xml: DEBUG: ========> Done with courselike import from toy
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:18:36.681856+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": false, "setting": "is_staff", "table": "auth_user", "new": true}, "event_type": "edx.user.settings.changed"}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
9) ERROR: test_invalid_module_state (lms.djangoapps.instructor_analytics.tests.test_basic.TestStudentSubmissionsAnalyticsBasic)

   Traceback (most recent call last):
    lms/djangoapps/instructor_analytics/tests/test_basic.py line 415 in test_invalid_module_state
      self.load_course('edX/graded/2012_Fall')
    lms/djangoapps/instructor_analytics/tests/test_basic.py line 395 in load_course
      self.course = get_course(course_key)
    lms/djangoapps/courseware/courses.py line 61 in get_course
      raise ValueError(u"Course not found: {0}".format(course_id))
   ValueError: Course not found: edX/graded/2012_Fall
   -------------------- >> begin captured logging << --------------------
   root: DEBUG: Using MongoDB for static content serving at host=localhost port=27017 db=xcontent
   xmodule.modulestore.xml: DEBUG: ========> Starting courselike import from toy
   xmodule.modulestore.xml: DEBUG: ========> Done with courselike import from toy
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:18:36.811205+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": false, "setting": "is_staff", "table": "auth_user", "new": true}, "event_type": "edx.user.settings.changed"}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
10) ERROR: test_unicode (lms.djangoapps.instructor_task.tests.test_tasks_helper.TestReponsesReport)

   Traceback (most recent call last):
    lms/djangoapps/instructor_task/tests/test_tasks_helper.py line 404 in test_unicode
      self.course = get_course_by_id(course_key)
    lms/djangoapps/courseware/courses.py line 79 in get_course_by_id
      raise Http404("Course not found.")
   Http404: Course not found.
   -------------------- >> begin captured logging << --------------------
   root: DEBUG: Using MongoDB for static content serving at host=localhost port=27017 db=xcontent
   xmodule.modulestore.xml: DEBUG: ========> Starting courselike import from toy
   xmodule.modulestore.xml: DEBUG: ========> Done with courselike import from toy
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:19:14.184319+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": false, "setting": "is_staff", "table": "auth_user", "new": true}, "event_type": "edx.user.settings.changed"}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
11) FAIL: test_reports_rev_chronologically_sorted (lms.djangoapps.instructor_task.tests.test_tasks_helper.TestReportStore)

   Traceback (most recent call last):
    lms/djangoapps/instructor_task/tests/test_tasks_helper.py line 345 in test_reports_rev_chronologically_sorted
      self.assertEquals(filenames, rev_chronological_filenames)
   AssertionError: Lists differ: ['filename4_2015-03-10-0024.cs... != ['filename4_2015-03-10-0024.cs...
   
   First differing element 1:
   filename2_2015-03-10-0022.csv
   filename3_2015-03-10-0023.csv
   
     ['filename4_2015-03-10-0024.csv',
   +  'filename3_2015-03-10-0023.csv',
      'filename2_2015-03-10-0022.csv',
   -  'filename3_2015-03-10-0023.csv',
      'filename1_2015-03-10-0021.csv']
   -------------------- >> begin captured logging << --------------------
   root: DEBUG: Using MongoDB for static content serving at host=localhost port=27017 db=xcontent
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:19:14.314128+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": false, "setting": "is_staff", "table": "auth_user", "new": true}, "event_type": "edx.user.settings.changed"}
   util.models: ERROR: String decompression failed. There may be corrupted data in the database: Incorrect padding
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('org.5849', 'course_5849', 'Run_5849', None, None)}. Response was: None
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
12) FAIL: test_sneakpeek_success (lms.djangoapps.sneakpeek_deeplink.tests.SneakPeekDeeplinkMiddlewareTests)

   Traceback (most recent call last):
    lms/djangoapps/sneakpeek_deeplink/tests.py line 102 in test_sneakpeek_success
      self.assertSuccessfulSneakPeek(req, self.open_course)
    lms/djangoapps/sneakpeek_deeplink/tests.py line 90 in assertSuccessfulSneakPeek
      self.assertTrue(request.user.is_authenticated())
   AssertionError: False is not true
   -------------------- >> begin captured logging << --------------------
   root: DEBUG: Using MongoDB for static content serving at host=localhost port=27017 db=xcontent
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:21:09.407441+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": false, "setting": "is_staff", "table": "auth_user", "new": true}, "event_type": "edx.user.settings.changed"}
   util.models: ERROR: String decompression failed. There may be corrupted data in the database: Incorrect padding
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('org.6828', 'course_6828', 'Run_6828', None, None)}. Response was: None
   util.models: ERROR: String decompression failed. There may be corrupted data in the database: Incorrect padding
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('org.6829', 'course_6829', 'Run_6829', None, None)}. Response was: None
   util.models: ERROR: String decompression failed. There may be corrupted data in the database: Incorrect padding
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('org.6830', 'course_6830', 'Run_6830', None, None)}. Response was: None
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
13) FAIL: test_microsite_uses_old_login_page (lms.djangoapps.student_account.test.test_views.StudentAccountLoginAndRegistrationTest)

   Traceback (most recent call last):
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/utils.py line 215 in inner
      return test_func(*args, **kwargs)
    lms/djangoapps/student_account/test/test_views.py line 467 in test_microsite_uses_old_login_page
      self.assertContains(resp, "Log into your Test Microsite Account")  # AssertionError: Couldn't find 'Log into your Test Microsite Account' in response
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find 'Log into your Test Microsite Account' in response
   -------------------- >> begin captured logging << --------------------
   root: DEBUG: Using MongoDB for static content serving at host=localhost port=27017 db=xcontent
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:21:16.737400+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": false, "setting": "is_staff", "table": "auth_user", "new": true}, "event_type": "edx.user.settings.changed"}
   tracking: INFO: {"username": "", "event_type": "/account/login/", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {}, \"GET\": {}}", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/account/login/"}, "time": "2015-05-05T21:21:16.872350+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
14) FAIL: test_microsite_uses_old_register_page (lms.djangoapps.student_account.test.test_views.StudentAccountLoginAndRegistrationTest)

   Traceback (most recent call last):
    lms/djangoapps/student_account/test/test_views.py line 477 in test_microsite_uses_old_register_page
      self.assertContains(resp, "Register for Test Microsite")  # AssertionError: Couldn't find 'Register for  your Test Microsite Account' in response
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find 'Register for Test Microsite' in response
   -------------------- >> begin captured logging << --------------------
   root: DEBUG: Using MongoDB for static content serving at host=localhost port=27017 db=xcontent
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:21:17.053611+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": false, "setting": "is_staff", "table": "auth_user", "new": true}, "event_type": "edx.user.settings.changed"}
   tracking: INFO: {"username": "", "event_type": "/account/register/", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {}, \"GET\": {}}", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/account/register/"}, "time": "2015-05-05T21:21:17.161176+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
15) FAIL: test_activation_email_exception (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/mock.py line 1201 in patched
      return func(*args, **keywargs)
    common/djangoapps/cme_registration/tests/registration_tests.py line 560 in test_activation_email_exception
      self.assertContains(response, 'Could not send activation e-mail.')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find 'Could not send activation e-mail.' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"f", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.340102+00:00", "page": null}
   mitx.student: WARNING: Unable to send activation email to user
   Traceback (most recent call last):
     File "/edx/app/edxapp/edx-platform/common/djangoapps/cme_registration/views.py", line 161, in cme_create_account
       user.email_user(subject, message, settings.DEFAULT_FROM_EMAIL)
     File "/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/mock.py", line 955, in __call__
       return _mock_self._mock_call(*args, **kwargs)
     File "/edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/mock.py", line 1010, in _mock_call
       raise effect
   Exception
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
16) FAIL: test_address_1_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 280 in test_address_1_required
      self.assertContains(response, '{"field": "address_1", "value": "Enter your Address 1", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "address_1", "value": "Enter your Address 1", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"f", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.375870+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
17) FAIL: test_badly_formed_message (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 72 in test_badly_formed_message
      self.assertContains(response, '{"field": "username", "value": "Error (401 username). E-mail us.", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "username", "value": "Error (401 username). E-mail us.", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {}, \"GET\": {}}", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.383665+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
18) FAIL: test_birth_date_format1 (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 122 in test_birth_date_format1
      self.assertContains(response, '{"field": "birth_date", "value": "Enter your birth date as MM/DD", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "birth_date", "value": "Enter your birth date as MM/DD", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"f", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.407547+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
19) FAIL: test_birth_date_format2 (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 132 in test_birth_date_format2
      self.assertContains(response, '{"field": "birth_date", "value": "month must be in 1..12", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "birth_date", "value": "month must be in 1..12", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"f", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.433430+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
20) FAIL: test_birth_date_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 112 in test_birth_date_required
      self.assertContains(response, '{"field": "birth_date", "value": "Enter your birth date", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "birth_date", "value": "Enter your birth date", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"f", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.456954+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
21) FAIL: test_city_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 290 in test_city_required
      self.assertContains(response, '{"field": "city", "value": "Enter your city", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "city", "value": "Enter your city", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"\"], \"first", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.482865+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
22) FAIL: test_country_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 300 in test_country_required
      self.assertContains(response, '{"field": "country", "value": "Choose your country", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "country", "value": "Choose your country", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"f", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.507995+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
23) FAIL: test_dupe_username (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 507 in test_dupe_username
      self.assertContains(response, '{"field": "username", "value": "An account with the Public Username  \'student001\' already exists.", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "username", "value": "An account with the Public Username  'student001' already exists.", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:22:04.605301+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": null, "setting": "password", "table": "auth_user", "new": null}, "event_type": "edx.user.settings.changed"}
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"student001\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], ", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.630041+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
24) FAIL: test_first_name_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 92 in test_first_name_required
      self.assertContains(response, '{"field": "first_name", "value": "Enter your first name", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "first_name", "value": "Enter your first name", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"f", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.656644+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
25) FAIL: test_honor_code_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 353 in test_honor_code_required
      self.assertContains(response, '{"field": "honor_code", "value": "To enroll, you must follow the honor code.", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "honor_code", "value": "To enroll, you must follow the honor code.", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"first_name\": [\"Chester\"],", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.679847+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
26) FAIL: test_last_name_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 82 in test_last_name_required
      self.assertContains(response, '{"field": "last_name", "value": "Enter your last name", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "last_name", "value": "Enter your last name", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"first_n", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.704912+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
27) FAIL: test_license_country_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 164 in test_license_country_required
      self.assertContains(response, '{"field": "license_country", "value": "Choose your license country", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "license_country", "value": "Choose your license country", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"first_name\": [\"C", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.731104+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
28) FAIL: test_license_number_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 153 in test_license_number_required
      self.assertContains(response, '{"field": "license_number", "value": "Enter your license number", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "license_number", "value": "Enter your license number", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"f", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.760291+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
29) FAIL: test_license_state_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 175 in test_license_state_required
      self.assertContains(response, '{"field": "license_state", "value": "Choose your license state", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "license_state", "value": "Choose your license state", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"United States\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"fir", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.786604+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
30) FAIL: test_middle_initial_length (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 102 in test_middle_initial_length
      self.assertContains(response, '{"field": "middle_initial", "value": "Enter your middle initial as a single character", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "middle_initial", "value": "Enter your middle initial as a single character", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"ABC\"], \"city\": [\"city\"], ", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.809333+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
31) FAIL: test_patient_population_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 197 in test_patient_population_required
      self.assertContains(response, '{"field": "patient_population", "value": "Choose your patient population", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "patient_population", "value": "Choose your patient population", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"f", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.834659+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
32) FAIL: test_physician_status_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 186 in test_physician_status_required
      self.assertContains(response, '{"field": "physician_status", "value": "Enter your physician status", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "physician_status", "value": "Enter your physician status", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"first_name\": [\"Ch", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.859131+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
33) FAIL: test_postal_code_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 321 in test_postal_code_required
      self.assertContains(response, '{"field": "postal_code", "value": "Enter your postal code", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "postal_code", "value": "Enter your postal code", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"first_name\":", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.883722+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
34) FAIL: test_professional_designation_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 142 in test_professional_designation_required
      self.assertContains(response, '{"field": "professional_designation", "value": "Choose your professional designation", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "professional_designation", "value": "Choose your professional designation", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"f", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:04.907230+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
35) FAIL: test_register_page_loads (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 526 in test_register_page_loads
      self.assertEqual(response.status_code, 200)
   AssertionError: 405 != 200
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/register", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {}, \"GET\": {}}", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/register"}, "time": "2015-05-05T21:22:04.918099+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
36) FAIL: test_register_when_logged_in (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 518 in test_register_when_logged_in
      self.assertRedirects(response, reverse('dashboard'), status_code=302)
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 580 in assertRedirects
      (response.status_code, status_code))
   AssertionError: Response didn't redirect as expected: Response code was 405 (expected 302)
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:22:04.927319+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": null, "setting": "password", "table": "auth_user", "new": null}, "event_type": "edx.user.settings.changed"}
   audit: INFO: Login success - student002 (student002@test.com)
   tracking: INFO: {"username": "student002", "event_type": "/register", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {}, \"GET\": {}}", "event_source": "server", "context": {"user_id": 1, "org_id": "", "course_id": "", "path": "/register"}, "time": "2015-05-05T21:22:04.952723+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
37) FAIL: test_specialty_other (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 332 in test_specialty_other
      self.assertContains(response, '{"field": "specialty", "value": "Enter your specialty.", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "specialty", "value": "Enter your specialty.", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"Other\"], \"affiliation\": [\"affiliation\"], \"specialty_free\": [\"\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], ", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:05.063647+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
38) FAIL: test_specialty_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 208 in test_specialty_required
      self.assertContains(response, '{"field": "specialty", "value": "Choose your specialty", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "specialty", "value": "Choose your specialty", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"first_name", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:05.094707+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
39) FAIL: test_stanford_department_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 270 in test_stanford_department_required
      self.assertContains(response, '{"field": "stanford_department", "value": "Choose your Stanford department", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "stanford_department", "value": "Choose your Stanford department", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"Stanford University\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"first_name\":", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:05.128991+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
40) FAIL: test_state_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 311 in test_state_required
      self.assertContains(response, '{"field": "state", "value": "Choose your state", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "state", "value": "Choose your state", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"f", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:05.160182+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
41) FAIL: test_sub_affiliation_field (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 248 in test_sub_affiliation_field
      self.assertContains(response, '{"field": "sub_affiliation", "value": "Enter your Packard Children\'s Health Alliance affiliation", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "sub_affiliation", "value": "Enter your Packard Children's Health Alliance affiliation", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"affiliation\": [\"Packard Children's Health Alliance\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"terms_of_service\": [\"true\"], \"other_affiliation\": [\"other_affiliation\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"first_name\": [\"Chester\"], \"license_number\": [\"license_number\"], \"state\": [\"state\"], \"professional_designation\": [\"professional_designation\"], \"email\": [\"test@email.com\"], \"license_state\": [\"lice", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:05.194324+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
42) FAIL: test_sub_specialty_other (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 343 in test_sub_specialty_other
      self.assertContains(response, '{"field": "sub_specialty", "value": "Enter your sub-specialty.", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "sub_specialty", "value": "Enter your sub-specialty.", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"Other\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"license_state\": [\"license_state\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\":", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:05.265935+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
43) FAIL: test_sunet_id_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 259 in test_sunet_id_required
      self.assertContains(response, '{"field": "sunet_id", "value": "Enter your SUNet ID", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "sunet_id", "value": "Enter your SUNet ID", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"Stanford University\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"f", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:05.289346+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
44) FAIL: test_tos_required (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 363 in test_tos_required
      self.assertContains(response, '{"field": "terms_of_service", "value": "You must accept the terms of service.", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "terms_of_service", "value": "You must accept the terms of service.", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"first_name\": [\"Chester\"], \"name", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:05.314095+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
45) FAIL: test_valid_email (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 485 in test_valid_email
      self.assertContains(response, '{"field": "email", "value": "Valid e-mail is required.", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "email", "value": "Valid e-mail is required.", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"testuser\"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"f", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:05.341238+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
46) FAIL: test_valid_username (cme_registration.tests.registration_tests.TestCmeRegistration)

   Traceback (most recent call last):
    common/djangoapps/cme_registration/tests/registration_tests.py line 495 in test_valid_username
      self.assertContains(response, '{"field": "username", "value": "Username should only consist of A-Z and 0-9, with no spaces.", "success": false}')
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find '{"field": "username", "value": "Username should only consist of A-Z and 0-9, with no spaces.", "success": false}' in response
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\" $%$%$# \"], \"sub_specialty\": [\"sub_specialty\"], \"last_name\": [\"Tester\"], \"sunet_id\": [\"sunet_id\"], \"specialty\": [\"specialty\"], \"affiliation\": [\"affiliation\"], \"postal_code\": [\"postal_code\"], \"physician_status\": [\"physician_status\"], \"honor_code\": [\"true\"], \"terms_of_service\": [\"true\"], \"password\": \"********\", \"other_affiliation\": [\"other_affiliation\"], \"license_country\": [\"license_country\"], \"stanford_department\": [\"stanford_department\"], \"middle_initial\": [\"A\"], \"city\": [\"city\"], \"f", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:22:05.370516+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
47) FAIL: test_activation_email (student.tests.test_email.ActivationEmailTests)

   Traceback (most recent call last):
    common/djangoapps/student/tests/test_email.py line 146 in test_activation_email
      self._assert_activation_email(self.ACTIVATION_SUBJECT, self.OPENEDX_FRAGMENTS)
    common/djangoapps/student/tests/test_email.py line 177 in _assert_activation_email
      self.assertEqual(msg.subject, subject)
   AssertionError: u'Activate Your Your Account Name Here Account' != 'Activate Your edX Account'
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"test_user\"], \"name\": [\"Test User\"], \"honor_code\": [\"True\"], \"terms_of_service\": [\"True\"], \"password\": \"********\", \"email\": [\"test_user@example.com\"]}, \"GET\": {}}", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:23:18.398614+00:00", "page": null}
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:23:18.412776+00:00", "agent": "", "page": null, "host": "testserver", "session": "", "referer": "", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "ip": "127.0.0.1", "event": {"user_id": 1, "truncated": [], "old": null, "setting": "pref-lang", "table": "user_api_userpreference", "new": "en"}, "event_type": "edx.user.settings.changed"}
   audit: INFO: Login success - test_user (test_user@example.com)
   audit: INFO: Login success on new account creation - test_user
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
48) FAIL: test_activation_email_edx_domain (student.tests.test_email.ActivationEmailTests)

   Traceback (most recent call last):
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/mock.py line 1618 in _inner
      return f(*args, **kw)
    common/djangoapps/student/tests/test_email.py line 151 in test_activation_email_edx_domain
      self._assert_activation_email(self.ACTIVATION_SUBJECT, self.EDX_DOMAIN_FRAGMENTS)
    common/djangoapps/student/tests/test_email.py line 177 in _assert_activation_email
      self.assertEqual(msg.subject, subject)
   AssertionError: u'Activate Your Your Account Name Here Account' != 'Activate Your edX Account'
   -------------------- >> begin captured logging << --------------------
   tracking: INFO: {"username": "", "event_type": "/create_account", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {\"username\": [\"test_user\"], \"name\": [\"Test User\"], \"honor_code\": [\"True\"], \"terms_of_service\": [\"True\"], \"password\": \"********\", \"email\": [\"test_user@example.com\"]}, \"GET\": {}}", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "time": "2015-05-05T21:23:18.434940+00:00", "page": null}
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:23:18.448235+00:00", "agent": "", "page": null, "host": "testserver", "session": "", "referer": "", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/create_account"}, "ip": "127.0.0.1", "event": {"user_id": 1, "truncated": [], "old": null, "setting": "pref-lang", "table": "user_api_userpreference", "new": "en"}, "event_type": "edx.user.settings.changed"}
   audit: INFO: Login success - test_user (test_user@example.com)
   audit: INFO: Login success on new account creation - test_user
   --------------------- >> end captured logging << ---------------------

-----------------------------------------------------------------------------
49) FAIL: test_externalauth_login_required_course_context (student.tests.test_login.ExternalAuthShibTest)

   Traceback (most recent call last):
    common/djangoapps/student/tests/test_login.py line 429 in test_externalauth_login_required_course_context
      platform_name=settings.PLATFORM_NAME,
    /edx/app/edxapp/venvs/edxapp/local/lib/python2.7/site-packages/django/test/testcases.py line 640 in assertContains
      msg_prefix + "Couldn't find '%s' in response" % text)
   AssertionError: Couldn't find 'Log into your Your Account Name Here Account | edX' in response
   -------------------- >> begin captured logging << --------------------
   root: DEBUG: Using MongoDB for static content serving at host=localhost port=27017 db=xcontent
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:23:26.817754+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 1, "truncated": [], "old": false, "setting": "is_staff", "table": "auth_user", "new": true}, "event_type": "edx.user.settings.changed"}
   util.models: ERROR: String decompression failed. There may be corrupted data in the database: Not a gzipped file
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('Stanford', '456', 'NO_SHIB', None, None)}. Response was: None
   util.models: ERROR: String decompression failed. There may be corrupted data in the database: Not a gzipped file
   xmodule.modulestore.django: INFO: Sent course_published signal to <function listen_for_course_publish at 0x72fba28> with kwargs {'course_key': SlashSeparatedCourseKey('Stanford', '123', 'Shib_Only', None, None)}. Response was: None
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:23:26.881057+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 2, "truncated": [], "old": null, "setting": "password", "table": "auth_user", "new": null}, "event_type": "edx.user.settings.changed"}
   tracking: INFO: {"username": "", "event_source": "server", "name": "edx.user.settings.changed", "accept_language": "", "time": "2015-05-05T21:23:26.893103+00:00", "agent": "", "page": null, "host": "", "session": "", "referer": "", "context": {}, "ip": "", "event": {"user_id": 3, "truncated": [], "old": null, "setting": "password", "table": "auth_user", "new": null}, "event_type": "edx.user.settings.changed"}
   tracking: INFO: {"username": "", "event_type": "/courses/Stanford/456/NO_SHIB/courseware", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {}, \"GET\": {}}", "event_source": "server", "context": {"course_user_tags": {}, "user_id": "", "org_id": "Stanford", "course_id": "Stanford/456/NO_SHIB", "path": "/courses/Stanford/456/NO_SHIB/courseware"}, "time": "2015-05-05T21:23:26.990192+00:00", "page": null}
   tracking: INFO: {"username": "", "event_type": "/accounts/login", "ip": "127.0.0.1", "agent": "", "host": "testserver", "referer": "", "accept_language": "", "event": "{\"POST\": {}, \"GET\": {\"next\": [\"/courses/Stanford/456/NO_SHIB/courseware\"]}}", "event_source": "server", "context": {"user_id": "", "org_id": "", "course_id": "", "path": "/accounts/login"}, "time": "2015-05-05T21:23:26.993569+00:00", "page": null}
   --------------------- >> end captured logging << ---------------------


-----------------------------------------------------------------------------
4683 tests run in 1430.6 seconds. 
44 FAILED, 5 errors, 21 skipped (4613 tests passed)
nosetests lms/djangoapps/__init__.py lms/djangoapps/branding lms/djangoapps/branding_stanford lms/djangoapps/bulk_email lms/djangoapps/ccx lms/djangoapps/certificates lms/djangoapps/circuit lms/djangoapps/class_dashboard lms/djangoapps/commerce lms/djangoapps/course_structure_api lms/djangoapps/course_wiki lms/djangoapps/courseware lms/djangoapps/dashboard lms/djangoapps/debug lms/djangoapps/django_comment_client lms/djangoapps/edxnotes lms/djangoapps/foldit lms/djangoapps/instructor lms/djangoapps/instructor_analytics lms/djangoapps/instructor_email_widget lms/djangoapps/instructor_task lms/djangoapps/jabber lms/djangoapps/licenses lms/djangoapps/lms_migration lms/djangoapps/lms_xblock lms/djangoapps/mobile_api lms/djangoapps/notes lms/djangoapps/notification_prefs lms/djangoapps/notifier_api lms/djangoapps/oauth2_handler lms/djangoapps/open_ended_grading lms/djangoapps/psychometrics lms/djangoapps/shoppingcart lms/djangoapps/sneakpeek_deeplink lms/djangoapps/static_template_view lms/djangoapps/staticbook lms/djangoapps/student_account lms/djangoapps/student_profile lms/djangoapps/survey lms/djangoapps/verify_student common/djangoapps/cache_toolbox common/djangoapps/cme_registration common/djangoapps/config_models common/djangoapps/contentserver common/djangoapps/cors_csrf common/djangoapps/course_about common/djangoapps/course_action_state common/djangoapps/course_modes common/djangoapps/dark_lang common/djangoapps/datadog common/djangoapps/django_comment_common common/djangoapps/django_future common/djangoapps/edxmako common/djangoapps/embargo common/djangoapps/enrollment common/djangoapps/external_auth common/djangoapps/fix_bad_data common/djangoapps/geoinfo common/djangoapps/heartbeat common/djangoapps/lang_pref common/djangoapps/microsite_configuration common/djangoapps/monitoring common/djangoapps/monkey_patch common/djangoapps/oauth_exchange common/djangoapps/performance common/djangoapps/pipeline_js common/djangoapps/pipeline_mako common/djangoapps/request_cache common/djangoapps/reverification common/djangoapps/service_status common/djangoapps/session_inactivity_timeout common/djangoapps/static_replace common/djangoapps/status common/djangoapps/student common/djangoapps/terrain common/djangoapps/third_party_auth common/djangoapps/track common/djangoapps/util common/djangoapps/xblock_django common/djangoapps/xmodule_django common/djangoapps/xmodule_modifiers.py openedx/core/djangoapps/__init__.py openedx/core/djangoapps/content openedx/core/djangoapps/course_groups openedx/core/djangoapps/profile_images openedx/core/djangoapps/user_api lms/lib/__init__.py lms/lib/comment_client lms/lib/courseware_search lms/lib/newrelic_logging lms/lib/xblock lms/tests.py --id-file /edx/app/edxapp/edx-platform/.testids/lms/noseids --xunit-file /edx/app/edxapp/edx-platform/reports/lms/nosetests.xml --verbosity=1
Creating test database for alias 'default'...
Creating test database for alias 'jabber'...
Destroying test database for alias 'default'...
Destroying test database for alias 'jabber'...

Cleaning up after lms
---> pavelib.utils.test.utils.clean_mongo
mongo localhost:27017 /edx/app/edxapp/edx-platform/scripts/delete-mongo-test-dbs.js
MongoDB shell version: 2.6.5
connecting to: localhost:27017/test
Dropping test db test_xlog

Cleaning up after python tests
[31;01m

================================================
Tests failed in the following suites:
* [39;49;00m[31;01mlms

[39;49;00m
